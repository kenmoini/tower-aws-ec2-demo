---
- name: Deploy Workshop Lab infrastructure to AWS Lab Cluster
  hosts: localhost
  gather_facts: false
  vars:
    ec2_exact_count: 1
    ec2_vpcidr: 10.251.0.0/16
    ec2_subnetcidr: 10.251.1.0/24
    ec2_az: a
    ec2_region: us-east-1
    ec2_stack_name: labStack
    ec2_key_name: secretKeyName
    resource_requester: admin
    
  tasks:
  
  - name: Create VPC
    ec2_vpc_net:
      state: present
      name: "LabVPC-{{ resource_requester }}-{{ ec2_stack_name }}"
      cidr_block: "{{ ec2_vpcidr }}"
      tags:
        resourceRequester: "{{ resource_requester }}"
        environment: workshop_lab
        labStackName: "{{ ec2_stack_name }}"
        workshoplabs: "true"
      region: "{{ ec2_region }}"
    register: vpc_network
      
  - name: Create VPC Subnet
    ec2_vpc_subnet:
      state: present
      region: "{{ ec2_region }}"
      vpc_id: "{{ vpc_network.vpc.id }}"
      cidr: "{{ ec2_subnetcidr }}"
      tags:
        resourceRequester: "{{ resource_requester }}"
        environment: workshop_lab
        labStackName: "{{ ec2_stack_name }}"
        workshoplabs: "true"
    register: vpc_subnet
      
  - name: Create VPC Internet Gateway
    ec2_vpc_igw:
      state: present
      vpc_id: "{{ vpc_network.vpc.id }}"
      region: "{{ ec2_region }}"
      tags:
        resourceRequester: "{{ resource_requester }}"
        environment: workshop_lab
        labStackName: "{{ ec2_stack_name }}"
        workshoplabs: "true"
    register: vpc_igw
    
  - name: Create VPC Public Subnet Route Table
    ec2_vpc_route_table:
      region: "{{ ec2_region }}"
      vpc_id: "{{ vpc_network.vpc.id }}"
      tags:
        resourceRequester: "{{ resource_requester }}"
        environment: workshop_lab
        labStackName: "{{ ec2_stack_name }}"
        workshoplabs: "true"
        name: "{{ ec2_stack_name }}-Public"
      subnets:
        - "{{ vpc_subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ vpc_igw.gateway_id }}"
    register: vpc_subnet_rt
      
  - name: Create VPC Security Group
    ec2_group:
      name: "{{ ec2_stack_name }}-labservers"
      region: "{{ ec2_region }}"
      description: SG for Labservers
      vpc_id: "{{ vpc_network.vpc.id }}"
      rules:
        - proto: tcp
          from_port: 22
          to_port: 22
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 80
          to_port: 80
          cidr_ip: 0.0.0.0/0
        - proto: tcp
          from_port: 443
          to_port: 443
          cidr_ip: 0.0.0.0/0
      tags:
        resourceRequester: "{{ resource_requester }}"
        environment: workshop_lab
        labStackName: "{{ ec2_stack_name }}"
        workshoplabs: "true"
        
  - name: Search for latest RHEL 7 AMI
    ec2_ami_info:
      owner: "309956199498"
      region: "{{ ec2_region }}"
      filters:
        name: "RHEL-7.7_HVM-2*"
    register: find_results
    
  - name: Create EC2 Instances with tags
    ec2:
      key_name: "{{ ec2_key_name }}"
      group: "{{ ec2_stack_name }}-labservers"
      volumes:
      - device_name: /dev/sda1
        volume_type: gp2
        volume_size: 20
        delete_on_termination: true
      vpc_subnet_id: "{{ vpc_subnet.subnet.id }}"
      instance_type: m4.xlarge
      image: "{{ find_results.images[0].image_id }}"
      wait: true
      region: "{{ ec2_region }}"
      exact_count: "{{ ec2_exact_count }}"
      count_tag:
        Name: "ec2-{{ resource_requester }}-{{ ec2_stack_name }}"
        Count: "{{ ec2_exact_count }}"
      instance_tags:
        Name: "ec2-{{ resource_requester }}-{{ ec2_stack_name }}"
        Count: "{{ ec2_exact_count }}"
        resourceRequester: "{{ resource_requester }}"
        environment: workshop_lab
        labStackName: "{{ ec2_stack_name }}"
        workshoplabs: "true"
      assign_public_ip: true
    register: ec2
    
  - name: Display stack instances info
    debug:
      var: ec2
      verbosity: 1
      
  - name: Ensure all instances are ready
    wait_for:
      port: 22
      host: "{{ item.public_ip }}"
      search_regex: OpenSSH
    with_items: "{{ ec2.tagged_instances }}"
    
  - name: Pause to let cloud init complete
    pause:
      seconds: 90
      
  - name: Build group of instances
    add_host:
      name: "{{ item.public_dns_name }}"
      groups: labservers
      ansible_user: ec2-user
      ansible_host: "{{ item.public_ip }}"
    with_items: "{{ ec2.tagged_instances }}"
    
  - name: Ansible Tower Workflow Pass
    set_stats:
      data:
        instances: "{{ ec2.tagged_instances }}"
        instance_source: ec2
